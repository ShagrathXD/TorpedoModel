Комментарии по поводу реализации движения торпеды

1. чтобы исключить путаницу, теперь ObjectControl (сокр. O) существует в одном экземпляре и принадлежит TorpedoControlAlgorithm.

2. начну с прямолинейного движения, режим СН1

3. я понял так, что в О передается значение, которому должна быть равна скорость на следующем шаге. Таким образом, чтобы достичь скорости
С с ускорением У при шаге моделирования Ш, надо создать структуру типа такой:
	пока (GetSpeed) != С
		EnginePower += У*Ш;

правильно?

4. если правильно, то получается вот так:
if (targ.distance > d2_)    //если дистанция до цели превышает d2, то
{
	Classification(targ);   //классификация цели
	speed = obj.EnginePower;
	if (speed < s1)			//надо увеличить скорость до 42 узлов
		obj.SetEnginePower(speed + (3 / 2));   //с ускорением 1.5 узла; шаг моделирования пока не учитывается
	else
		if (speed > s1)		//если скорость превышена, то на след шаге она обрезается до 42
			obj.SetEnginePower(s1);
		else				//если = 42, то ничего не меняется
			break;                                
}


5. Когда движение прямолинейное, скорости RotationVelocity равны нулю?
предположил, что да

6. Все же мне совершенно непонятно, по какому принципу я должен полученное значение TargetCourse превратить в скорости RotationVelocity

7. как определяется значение глубины? Надо ли по ней регулировать (макс/мин глубина?)

8. итоговый вариант выглядит так:

public void Convergence1()      //самонаведение СН1     (2)
        {
            speed = obj.EnginePower;
            switch (targ.isReceived)    
            {
                case true:
                    if (targ.distance > d2_)    //если дистанция до цели превышает d2, то
                    {
                        Classification(targ);   //классификация цели
                        if (speed < s1)
                            obj.SetEnginePower(speed + (3 / 2));
                        else
                        {
                            if (speed > s1)
                                obj.SetEnginePower(s1);
                            else
                                break;        
                        }
                        obj.SetHorizontalRotationVelocity(0);
                        obj.SetVerticalRotationVelocity(0);
                    }
                    else                     //если дистанция меньше d2
                    {                        
                            mode_ = (int)Modes.Con2;    //переход к режиму СН2
                                    
                    }
                    break;
                case false:         //если сигнала нет, 
                    if (speed = s2)     //если скорость = 28 узл, то 
                        mode_ = (int)Modes.PS1;     //переход к режиму ПРП1
                    else
                    {
                        if (speed > s2)
                            obj.SetEnginePower(speed - (5 / 2));
                        else
                        {
                            obj.SetEnginePower(s2);
                            mode_ = (int)Modes.PS1;
                        }
                    }            
                    break;
            }
        }